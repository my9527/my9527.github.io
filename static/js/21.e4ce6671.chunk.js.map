{"version":3,"sources":["nft/types/airdrop/index.ts","assets/images/airdopBackground.png","nft/queries/genie/GetAirdorpMerkle.ts","components/AirdropModal/index.tsx"],"names":["Airdrop","CollectionRewardsFetcher","address","url","process","controller","AbortController","timeoutId","setTimeout","abort","fetch","method","headers","r","clearInterval","json","data","RewardAmounts","ModalWrap","styled","div","Body","ClaimButton","ThemeButton","theme","accentAction","white","Line","LinkWrap","a","OpacityHoverState","ImageContainer","StyledImage","img","USDCLabel","TextContainer","RewardsDetailsContainer","CurrencyText","span","ClaimContainer","SuccessText","EtherscanLink","CloseButton","SyledCloseIcon","CloseIcon","Error","accentCritical","ReactLinkWrap","RewardsText","RewardsInformationText","textPrimary","MainHeader","EtherscanLinkWrap","AirdropModal","useWeb3React","account","provider","useState","claim","setClaim","isClaimed","setIsClaimed","hash","setHash","error","setError","setIsClaimAvailable","useIsNftClaimAvailable","state","isSubmitting","setIsSubmitting","totalAmount","setTotalAmount","isOpen","useModalIsOpen","ApplicationModal","UNISWAP_NFT_AIRDROP_CLAIM","usdcAirdropToggle","useToggleModal","contract","useContract","UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS","uniswapNftAirdropClaim","displayError","useEffect","find","rewardType","GENIE_UNISWAP_USDC_AIRDROP","connect","functions","index","usdAmount","BigNumber","from","amount","toNumber","makeClaim","merkleProof","getSigner","response","wait","Modal","hideBorder","onDismiss","maxHeight","maxWidth","HeadlineSmall","href","target","Link","size","ButtonSize","medium","emphasis","ButtonEmphasis","onClick","stroke","tradingRewardAmount","combinedAmount","holderRewardAmount","src","airdropBackgroundv2","disabled","Loader"],"mappings":"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","file":"static/js/21.e4ce6671.chunk.js","sourcesContent":["export enum Airdrop {\n  LOOKS_RARE_NFT_COMMERCE_REWARDS = 'LOOKS_RARE_NFT_COMMERCE_REWARDS',\n  GENIE_UNISWAP_USDC_AIRDROP = 'GENIE_UNISWAP_USDC_AIRDROP',\n}\n\nexport interface Rewards {\n  amount: string\n  walletAddress: string\n  tokenAddress: string\n  merkleProof: Array<string>\n  rewardType: Airdrop\n  chainId: number\n  index: number\n}\n","export default __webpack_public_path__ + \"static/media/airdopBackground.7f54f314.png\";","import { Rewards } from 'nft/types/airdrop'\n\ninterface CollectionrRewardsResponse {\n  data: Array<Rewards>\n}\n\nexport const CollectionRewardsFetcher = async (address: string): Promise<CollectionrRewardsResponse> => {\n  const url = `${process.env.REACT_APP_TEMP_API_URL}/nft/rewards/${address}?category=GENIE_UNISWAP_USDC_AIRDROP`\n\n  const controller = new AbortController()\n\n  const timeoutId = setTimeout(() => controller.abort(), 3000)\n\n  const r = await fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n  clearInterval(timeoutId)\n  const data = await r.json()\n\n  return data\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport type { TransactionResponse } from '@ethersproject/providers'\nimport { useWeb3React } from '@web3-react/core'\nimport uniswapNftAirdropClaim from 'abis/uniswap-nft-airdrop-claim.json'\nimport airdropBackgroundv2 from 'assets/images/airdopBackground.png'\nimport { ButtonEmphasis, ButtonSize, ThemeButton } from 'components/Button'\nimport { OpacityHoverState } from 'components/Common'\nimport Loader from 'components/Loader'\nimport { UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS } from 'constants/addresses'\nimport { useContract } from 'hooks/useContract'\nimport { ChevronRightIcon } from 'nft/components/icons'\nimport { useIsNftClaimAvailable } from 'nft/hooks/useIsNftClaimAvailable'\nimport { CollectionRewardsFetcher } from 'nft/queries/genie/GetAirdorpMerkle'\nimport { Airdrop, Rewards } from 'nft/types/airdrop'\nimport { useEffect, useState } from 'react'\nimport { AlertTriangle } from 'react-feather'\nimport { useModalIsOpen, useToggleModal } from 'state/application/hooks'\nimport { ApplicationModal } from 'state/application/reducer'\nimport styled from 'styled-components/macro'\nimport { CloseIcon, ThemedText } from 'theme'\n\nimport Modal from '../Modal'\n\nconst ModalWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst Body = styled.div`\n  padding: 28px 20px 20px 20px;\n`\n\nconst ClaimButton = styled(ThemeButton)`\n  width: 100%;\n  background-color: ${({ theme }) => theme.accentAction};\n  border-radius: 12px;\n  color: ${({ theme }) => theme.white};\n`\n\nconst Line = styled.div`\n  height: 1px;\n  width: 100%;\n  background-color: ${({ theme }) => theme.white};\n  opacity: 0.24;\n  margin-top: 12px;\n  margin-bottom: 12px;\n`\n\nconst LinkWrap = styled.a`\n  text-decoration: none;\n  ${OpacityHoverState}\n`\n\nconst ImageContainer = styled.div`\n  position: relative;\n  width: 100%;\n`\n\nconst StyledImage = styled.img`\n  width: 100%;\n  height: 170px;\n`\n\nconst USDCLabel = styled.div`\n  font-weight: 700;\n  font-size: 36px;\n  line-height: 44px;\n  margin-top: 8px;\n  color: white;\n`\n\nconst TextContainer = styled.div`\n  position: absolute;\n  left: 16px;\n  top: 16px;\n  right: 16px;\n`\n\nconst RewardsDetailsContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n`\n\nconst CurrencyText = styled.span`\n  color: white;\n  font-weight: 500;\n  font-size: 12px;\n  line-height: 14.5px;\n`\n\nconst ClaimContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  height: 380px;\n  padding: 60px 28px;\n  padding-bottom: 20px;\n`\n\nconst SuccessText = styled.div`\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 24px;\n  margin-top: 24px;\n  margin-bottom: 8px;\n`\n\nconst EtherscanLink = styled.a`\n  text-decoration: none;\n\n  ${OpacityHoverState}\n`\n\nconst CloseButton = styled(ThemeButton)`\n  max-width: 68px;\n  margin-top: auto;\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst SyledCloseIcon = styled(CloseIcon)`\n  float: right;\n  height: 24px;\n\n  ${OpacityHoverState}\n`\n\nconst Error = styled.div`\n  display: flex;\n  color: ${({ theme }) => theme.accentCritical};\n  font-weight: 500;\n  line-height: 24px;\n  border-radius: 16px;\n  padding: 12px 20px;\n  font-size: 14px;\n  align-items: center;\n  gap: 12px;\n`\n\nconst ReactLinkWrap = styled.div`\n  margin-bottom: 40px;\n`\n\nconst RewardsText = styled.span`\n  font-size: 12px;\n  line-height: 16px;\n  color: ${({ theme }) => theme.white};\n\n  &:first-child {\n    margin-bottom: 8px;\n  }\n`\n\nconst RewardsInformationText = styled.span`\n  display: inline-block;\n  font-size: 14px;\n  line-height: 20px;\n  color: ${({ theme }) => theme.textPrimary};\n  margin-bottom: 28px;\n`\n\nconst MainHeader = styled.span`\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 20px;\n  color: ${({ theme }) => theme.white};\n`\n\nconst EtherscanLinkWrap = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n`\n\nenum RewardAmounts {\n  tradingRewardAmount = 300,\n  holderRewardAmount = 1000,\n  combinedAmount = 1300,\n}\n\nconst AirdropModal = () => {\n  const { account, provider } = useWeb3React()\n  const [claim, setClaim] = useState<Rewards>()\n  const [isClaimed, setIsClaimed] = useState(false)\n  const [hash, setHash] = useState('')\n  const [error, setError] = useState(false)\n  const setIsClaimAvailable = useIsNftClaimAvailable((state) => state.setIsClaimAvailable)\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [totalAmount, setTotalAmount] = useState(0)\n  const isOpen = useModalIsOpen(ApplicationModal.UNISWAP_NFT_AIRDROP_CLAIM)\n  const usdcAirdropToggle = useToggleModal(ApplicationModal.UNISWAP_NFT_AIRDROP_CLAIM)\n  const contract = useContract(UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS, uniswapNftAirdropClaim)\n\n  const displayError = () => {\n    setIsSubmitting(false)\n    setError(true)\n    setTimeout(() => {\n      setError(false)\n    }, 5000)\n  }\n\n  useEffect(() => {\n    if (account && provider && contract) {\n      ;(async () => {\n        try {\n          const { data } = await CollectionRewardsFetcher(account)\n          const claim = data.find((claim) => claim?.rewardType === Airdrop.GENIE_UNISWAP_USDC_AIRDROP)\n\n          if (!claim) return\n\n          const [isClaimed] = await contract.connect(provider).functions.isClaimed(claim?.index)\n\n          if (claim && isClaimed === false) {\n            const usdAmount = BigNumber.from(claim.amount).div(10 ** 6)\n            setClaim(claim)\n            setTotalAmount(usdAmount.toNumber())\n            setIsClaimAvailable(true)\n          }\n        } catch (err) {\n          displayError()\n        }\n      })()\n    }\n  }, [account, contract, provider, setIsClaimAvailable])\n\n  const makeClaim = async () => {\n    try {\n      if (contract && claim && claim.amount && claim.merkleProof && provider) {\n        setIsSubmitting(true)\n\n        const response: TransactionResponse = await contract\n          .connect(provider?.getSigner())\n          .functions.claim(claim.index, account, claim?.amount, claim?.merkleProof)\n\n        await response.wait()\n\n        setHash(response.hash)\n        setIsSubmitting(false)\n        setIsClaimed(true)\n        setIsClaimAvailable(false)\n      }\n    } catch (err) {\n      setIsSubmitting(false)\n      displayError()\n    }\n  }\n\n  return (\n    <>\n      <Modal hideBorder isOpen={isOpen} onDismiss={usdcAirdropToggle} maxHeight={90} maxWidth={400}>\n        <ModalWrap>\n          {isClaimed ? (\n            <ClaimContainer>\n              <ThemedText.HeadlineSmall>Congratulations!</ThemedText.HeadlineSmall>\n              <SuccessText>\n                You have successfully claimed {totalAmount} USDC. Thank you for supporting Genie.xyz.\n              </SuccessText>\n              <EtherscanLink href={`https://etherscan.io/tx/${hash}`} target=\"_blank\">\n                <ThemedText.Link>\n                  <EtherscanLinkWrap>\n                    <span>Etherscan</span>\n                    <ChevronRightIcon />\n                  </EtherscanLinkWrap>\n                </ThemedText.Link>\n              </EtherscanLink>\n\n              <CloseButton size={ButtonSize.medium} emphasis={ButtonEmphasis.medium} onClick={usdcAirdropToggle}>\n                Close\n              </CloseButton>\n            </ClaimContainer>\n          ) : (\n            <>\n              <ImageContainer>\n                <TextContainer>\n                  <SyledCloseIcon onClick={usdcAirdropToggle} stroke=\"white\" />\n                  <MainHeader>Uniswap NFT Airdrop</MainHeader>\n                  <USDCLabel>{totalAmount} USDC</USDCLabel>\n                  <Line />\n                  <RewardsDetailsContainer>\n                    <RewardsText>Trading rewards</RewardsText>{' '}\n                    <CurrencyText>\n                      {totalAmount === RewardAmounts.tradingRewardAmount || totalAmount === RewardAmounts.combinedAmount\n                        ? `${RewardAmounts.tradingRewardAmount} USDC`\n                        : '0'}\n                    </CurrencyText>\n                  </RewardsDetailsContainer>\n                  <RewardsDetailsContainer>\n                    <RewardsText>Genie NFT holder rewards</RewardsText>{' '}\n                    <CurrencyText>\n                      {totalAmount !== RewardAmounts.tradingRewardAmount\n                        ? `${RewardAmounts.holderRewardAmount} USDC`\n                        : '0'}\n                    </CurrencyText>\n                  </RewardsDetailsContainer>\n                </TextContainer>\n                <StyledImage src={airdropBackgroundv2} />\n              </ImageContainer>\n              <Body>\n                <RewardsInformationText>\n                  As a long time supporter of Genie, you’ve been awarded {totalAmount} USDC tokens.\n                </RewardsInformationText>\n                <ReactLinkWrap>\n                  <LinkWrap href=\"https://uniswap.org/blog/uniswap-nft-aggregator-announcement\" target=\"_blank\">\n                    <ThemedText.Link>Read more about Uniswap NFT.</ThemedText.Link>\n                  </LinkWrap>\n                </ReactLinkWrap>\n\n                {error && (\n                  <Error>\n                    <AlertTriangle />\n                    Claim USDC failed. Please try again later\n                  </Error>\n                )}\n\n                <ClaimButton\n                  onClick={makeClaim}\n                  size={ButtonSize.medium}\n                  emphasis={ButtonEmphasis.medium}\n                  disabled={isSubmitting}\n                >\n                  {isSubmitting && <Loader stroke=\"white\" />}\n                  <span>Claim{isSubmitting && 'ing'} USDC</span>\n                </ClaimButton>\n              </Body>\n            </>\n          )}\n        </ModalWrap>\n      </Modal>\n    </>\n  )\n}\n\nexport default AirdropModal\n"],"sourceRoot":""}